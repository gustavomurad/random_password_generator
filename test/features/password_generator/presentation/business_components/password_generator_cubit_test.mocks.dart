// Mocks generated by Mockito 5.1.0 from annotations
// in random_password_generator/test/features/password_generator/presentation/business_components/password_generator_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:random_password_generator/features/password_generator/domain/models/preference_model.dart'
    as _i4;
import 'package:random_password_generator/features/password_generator/domain/usecases/password_generator_usecase.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [PasswordGeneratorUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class PasswordGeneratorUsecaseMock extends _i1.Mock
    implements _i2.PasswordGeneratorUsecase {
  PasswordGeneratorUsecaseMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>> generatePassword(
          {_i4.PreferenceModel? preferences}) =>
      (super.noSuchMethod(
          Invocation.method(#generatePassword, [], {#preferences: preferences}),
          returnValue:
              Future<List<String>>.value(<String>[])) as _i3
          .Future<List<String>>);
  @override
  _i3.Future<bool> savePreferences({_i4.PreferenceModel? preferences}) =>
      (super.noSuchMethod(
          Invocation.method(#savePreferences, [], {#preferences: preferences}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.PreferenceModel?> loadPreferences() =>
      (super.noSuchMethod(Invocation.method(#loadPreferences, []),
              returnValue: Future<_i4.PreferenceModel?>.value())
          as _i3.Future<_i4.PreferenceModel?>);
}
